apply plugin: 'com.android.library'

android {
    compileSdkVersion 26
    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
    }
}

import groovy.xml.MarkupBuilder

def resourcesDir = "$buildDir/generated/res/fontawesome"
def drawablesDir = file("$resourcesDir/drawable")
def stringResFile = file("$resourcesDir/values/fontawesome.xml")

def baseUrl = 'https://raw.githubusercontent.com/FortAwesome/Font-Awesome/master/fonts'
def ttfFontUrl = "$baseUrl/fontawesome-webfont.ttf"
def ttfFontFile = file("$resourcesDir/font/fontawesome.ttf")
def svgFontUrl = "$baseUrl/fontawesome-webfont.svg"
def svgFontFile = file("$buildDir/fontawesome-webfont.svg")

task downloadFontTtf {
    inputs.property 'url', ttfFontUrl
    outputs.file ttfFontFile

    doFirst {
        ttfFontFile.parentFile.mkdirs()
        ttfFontFile.newOutputStream() << new URL(ttfFontUrl).openStream()
    }
}

task downloadFontSvg {
    inputs.property 'url', svgFontUrl
    outputs.file svgFontFile

    doFirst {
        svgFontFile.parentFile.mkdirs()
        svgFontFile.newOutputStream() << new URL(svgFontUrl).openStream()
    }
}

task generateFontawesomeResources {
    inputs.file svgFontFile
    outputs.dir drawablesDir
    outputs.file stringResFile
    dependsOn downloadFontSvg

    doFirst {
        drawablesDir.mkdirs()
        stringResFile.parentFile.mkdirs()

        def resValues = [:]

        def parser = new XmlSlurper()
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)

        def svg = parser.parseText(svgFontFile.text)

        def bbox = svg.defs.font.'font-face'.'@bbox'.text().tokenize(' ')*.toDouble()
        def width = bbox[2] - bbox[0]
        def height = bbox[3] - bbox[1]
        def defOffsetX = (svg.defs.font.'@horiz-adv-x'.text() ?: 0) as double

        svg.defs.font.glyph.each { glyph ->
            def d = glyph.'@d'.text()

            if (d) {
                def name = glyph.'@glyph-name'.text().toLowerCase().replaceAll('[^a-z0-9_]+', '_')
                def file = file("$drawablesDir/${name}.xml")

                def offsetX = (glyph.'@horiz-adv-x'.text() ?: defOffsetX) as double

                def xml = new MarkupBuilder(file.newWriter())
                xml.mkp.xmlDeclaration version: '1.0', encoding: 'UTF-8'
                xml.vector(
                        'xmlns:android': 'http://schemas.android.com/apk/res/android',
                        'android:width': '24dp',
                        'android:height': '24dp',
                        'android:viewportWidth': width,
                        'android:viewportHeight': height) {
                    group(
                            'android:scaleX': 1,
                            'android:scaleY': -height / width,
                            'android:pivotX': width / 2,
                            'android:pivotY': height / 2) {
                        group(
                                'android:translateX': -bbox[0] + (offsetX ? (width - offsetX) / 2 : 0),
                                'android:translateY': -bbox[1]) {
                            path('android:fillColor': '#000', 'android:pathData': d)
                        }
                    }
                }

                resValues.put(name, glyph.'@unicode')
            }
        }

        def xml = new MarkupBuilder(stringResFile.newWriter())
        xml.mkp.xmlDeclaration version: '1.0', encoding: 'UTF-8'
        xml.resources() {
            resValues.each { k, v ->
                string(name: "fontawesome_$k", v)
            }
        }
    }
}

android {
    sourceSets.main.res.srcDirs drawablesDir.parentFile
    libraryVariants.all {
        it.mergeResources.dependsOn downloadFontTtf, generateFontawesomeResources
    }
}
